#!/usr/bin/env bash

function homestead {
    ( cd ~/homestead && vagrant $* )
}

function usenetup {
    ( cd ~/docker/usenet && docker-compose up -d $* )
}

function usenetdown {
    ( cd ~/docker/usenet && docker-compose down $* )
}

function update-stable-node {
	if [[ ! -z ${NVM_DIR+x} ]] && \
		[[ -n "$(type -t nvm)" ]] && [[ "$(type -t nvm)" == "function" ]] && \
		[[ -n "$(type -t nvm_version_path)" ]] && [[ "$(type -t nvm_version_path)" == "function" ]]
	then
		if [[ -L "$NVM_DIR/stable" ]]; then
			rm -f "$NVM_DIR/stable"
		fi

		ln -s $(nvm_version_path $(nvm version stable)) "$NVM_DIR/stable"

		echo "Created link from $(nvm_version_path $(nvm version stable)) to $NVM_DIR/stable"
	fi
}

function cleanupusb {
	if [[ ! -z $(diskutil info $(pwd) | grep -E 'Device Location:\s+External') ]]; then
		find . -name '._*' -delete
		find . -name '.DS_Store' -delete
		rm -rf .Spotlight-V100 .Trashes .fseventsd
	else
		echo "This command can only be run from an external drive"
	fi
}

# Backup a file or folder
function bak {
	while (($#)); do
		if [[ -r $1 && -w $(dirname $1) ]]; then
			if [[ -d $1 ]]; then
				cp -Rfp "$1" "$1.bak"
			else
				cp -i "$1" "$1.bak"
			fi
		fi
		shift
	done
}

# Unbackup a file or folder
function unbak {
	while (($#)); do
		if [[ -d "$1.bak" ]]; then
			mv -f "$1.bak" "$1"
		elif [[ -f "$1.bak" ]]; then
			mv -f "$1.bak" "$1"
		fi
		shift
	done
}

# Backup a file of folder with date/time string in filename and exisiting extension
function bakdate {
	curDateTime=$(date +%Y%m%d-%H%M%S)
	while (($#)); do
		if [[ -d $1 ]]; then
			cp -Rfp "$1" "$1-$curDateTime"
		else
			fullname=$(basename $1)
			if [[ $fullname == *.* ]]; then
				dirname=$(dirname $1)
				filename="${fullname%%.*}"
				extension="${fullname#*.}"
				newName="$dirname/$filename-$curDateTime.$extension"
			else
				newName="$1-$curDateTime"
			fi
			cp -i "$1" "$newName"
		fi
		shift
	done
}

# Temporarily serve a directory
function serveme {
	portnum=8888
	while [[ -n $(lsof -ti :$portnum) ]] && [[ $portnum -lt 9000 ]]; do
		let portnum++
	done

	if [[ $portnum -lt 9000 ]]; then
		open "http://localhost:$portnum/"
		php -d display_errors=0 -d log_errors=1 -d error_reporting=32767 -S localhost:$portnum
	fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`...";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git's colored diff when available
#hash git &>/dev/null;
#if [ $? -eq 0 ]; then
#	function diff() {
#		git diff --no-index --color-words "$@";
#	}
#fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# function mark2pdf {
# 	while (($#)); do
# 		fullname=$(basename "$1")
# 		if [[ $fullname == *.* ]]; then
# 			folder=$(dirname "$1")
# 			filename="${fullname%%.*}"
# 			extension="${fullname#*.}"
# 			src="$1"
# 			dest="$folder/$filename.pdf"
# 		else
# 			src="$1.md"
# 			dest="$1.pdf"
# 		fi
# 		if [[ -r "$src" && -w $(dirname "$dest") ]]; then
# 			pandoc --latex-engine=xelatex -V 'urlcolor:RoyalBlue' -V 'papersize:letterpaper' -V 'mainfont:Open Sans' -V 'geometry:margin=2cm' -S -o "$dest" "$src"
# 		fi
# 		shift
# 	done
# }
